{"version":3,"file":"component---src-pages-post-mdx-fields-slug-tsx-content-file-path-posts-2023-7-24-handling-related-data-microservice-mdx-b126491c6fef5c950cb3.js","mappings":"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","sources":["webpack://singsdev/./posts/2023-7-24-handling-related-data-microservice.mdx","webpack://singsdev/./src/pages/post/{mdx.fields__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    h4: \"h4\",\n    img: \"img\",\n    h3: \"h3\",\n    h1: \"h1\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"In a monolith system, dealing with related data is straightforward since they often reside in the same RDS database. Retrieving and combining this data is simple through joins, making it easy to filter or sort a list based on properties of the related data connected by foreign keys. Additionally, ensuring data consistency is relatively manageable, as all data constraints can be enforced within the same database.\"), \"\\n\", React.createElement(_components.p, null, \"However, the landscape changes significantly in a microservices system. In this architecture, related data may be distributed across different services, posing new challenges.\"), \"\\n\", React.createElement(_components.h2, null, \"An Example\"), \"\\n\", React.createElement(_components.p, null, \"Imagine a scenario in a microservices system where there are two services - one responsible for managing the product catalog, and the other for managing product inventory. Now, let's consider a simple requirement: displaying a list of inventory information for various products. In this list, we want to include:\"), \"\\n\", React.createElement(_components.p, null, \"Product names and manufacturers, which are stored in the product catalog service.\\nInventory information for each product, which is available in the inventory service.\\nHowever, there's a challenge - the inventory database doesn't hold product details such as the product name or manufacturer. Instead, the inventory data is linked to the product information using unique product IDs.\"), \"\\n\", React.createElement(_components.p, null, \"Consequently, the frontend faces the task of querying information from both services and aggregating it on the user interface. It must retrieve product names and manufacturers from the product catalog service and combine them with the corresponding inventory data obtained from the inventory service to create the complete list. This data aggregation process can be complex and requires careful handling to ensure seamless user experience.\"), \"\\n\", React.createElement(_components.h4, null, \"Entities\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNBDAyaigLG8ACfFAKqkKQZcKW22p1G5ZG1lJJ0xBp4t5Sp8JSmhJKjCBYajIYtYgeLfzCmhIyqhoI-gnAAr069eV6OAc5jOcWZM0zJC1RDFoL19GLTNGGbeUAKImZ0kBeVKl1IW-m00\",\n    alt: \"plantuml\"\n  })), \"\\n\", React.createElement(_components.h4, null, \"Components\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://www.plantuml.com/plantuml/svg/LL2z2i8m4DxlAOxknTr12Wr25maQT2WEQND2eIPmIGiYlhlLfhGPlt_u2XyqX-7P0zH7TZQGDNVK7akeApkI3OvVU24UkvR-GdMwGYtPcQ4DYI0LWD51DzeJPcjOH2wBQO5lG7outX1lVKetFMNmsROiEqc756d5ObeBIippmszhZsVI9cAf8fo4nI1cQdVZBX18DHj5IaCnlJ9zz0K0\",\n    alt: \"plantuml\"\n  })), \"\\n\", React.createElement(_components.h3, null, \"Filtering Inventory data with the products data\"), \"\\n\", React.createElement(_components.p, null, \"Filtering inventory data using product IDs is easy. But, if you want to filter based on other product details like names or manufacturers, it gets more complicated. You'll first need to get a list of product IDs and then send them to the Product Catalog Service to get the relevant information.\"), \"\\n\", React.createElement(_components.p, null, \"This means more steps and requests, which can slow down data retrieval. It might not be the best way, especially for a large number of products, to filter inventory data using different product properties owned by another service.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://www.plantuml.com/plantuml/svg/RP51IyD048Nl-ok67dfgC0XU2aahGIK7jHZnKeeCsKcwiDc4tKcb_zv94xK1hxlllU_Dp3OmUkuRgx3ariEZRnsJqu01CjN9dobDXuvXiVEjxak631bjMqD1_cHAMWpItTlhN9ox4pa9FCza-Sk7KXb4wM1OmzF3EznqOspODEZwIbhqddooByXIoQJX-UhveCG7KPIcaAsXOEG-m6qShs0g9mWTLk2meJ2213c1p5J9KDXCq4-ZGxB_6KoiXsLRLO4uYPVMD8QJkrX9mh_8_2yFlWmVuIfdP8lXlguzrSW4VAIP1MN9lwsrxFJoeateB9u7TGF6NLn1fW5h0gkjN4PkzGq0\",\n    alt: \"plantuml\"\n  })), \"\\n\", React.createElement(_components.h3, null, \"Sorting Inventory data with the products data\"), \"\\n\", React.createElement(_components.p, null, \"Sorting the inventory data based on product names can be challenging because the inventory service lacks information about the order of products according to their names. To achieve this, the Product Catalog Service needs to provide the order information.\"), \"\\n\", React.createElement(_components.p, null, \"Here's the process: the frontend first retrieves the product ordering information from the Product Catalog Service and then passes it to the Inventory Service. However, if there are 1000 products in the database, the web client needs to send 1000 product IDs to the Inventory Service! As you can imagine, this approach is not very efficient, especially when dealing with a large number of products.\"), \"\\n\", React.createElement(_components.p, null, \"In such cases, sorting inventory data by product name using this method may not be practical or feasible. There's a need to find alternative solutions to enhance the sorting process and improve overall system performance.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://www.plantuml.com/plantuml/svg/RP7BQiD034NtynKYYwngQWBT1Eoac3PuquQcT5DAc7eKHs3Fc1avnNzV-T678LlftgChQHjOUsxhIkc2dOT7xooZDQ03PAgH7XNKQCkms7jdse8XqwmhLy81_OKANFJI_SlpN9pR2re1TZDP_lIcL0PHsXlMi7juXTjcn8QDymRzPvTONQEIFaHHcaAsXWDhRWEiulW6fX22Cc4a2NCYqJIJC6mcwd607ic4vFqdlpW_bkvq2iX9lAoe9axkOYMSgnFpFofy4P_X7sTC88RxilHOQaRWCyuiMcxv6zh8wOQAeT1KkklLDP0TN47sXee2gwqyG5xo3G00\",\n    alt: \"plantuml\"\n  })), \"\\n\", React.createElement(_components.h2, null, \"Challenges with this Approach\"), \"\\n\", React.createElement(_components.p, null, \"While the described approach of querying data from different backend services and aggregating it on the frontend can work, it comes with some significant challenges:\"), \"\\n\", React.createElement(_components.p, null, \"Excessive API Requests: The frontend needs to make multiple API requests to different backend services, leading to a high number of requests. This can cause poor performance in the frontend web client, leading to slower loading times and potential user frustration.\"), \"\\n\", React.createElement(_components.p, null, \"Complex Data Operations: Certain tasks, like sorting data with related information owned by another service, become complex and inefficient. The need to request and combine data from multiple services can result in a cumbersome process that hampers system performance.\"), \"\\n\", React.createElement(_components.p, null, \"Tight Frontend-Backend Coupling: The frontend becomes tightly coupled with various microservices. Any changes in the backend services require corresponding updates in the frontend as well. This coupling reduces flexibility and can lead to compatibility issues when different services evolve independently.\"), \"\\n\", React.createElement(_components.p, null, \"To overcome these challenges, adopting the Backend For the Frontend (BFF) pattern offers a more efficient and decoupled solution. The BFF service acts as a mediator, consolidating data from different backend services and providing a unified API tailored to the frontend's specific needs. This way, the frontend client interacts with a single BFF service, reducing API requests and simplifying data retrieval and presentation. The BFF pattern promotes better performance, scalability, and flexibility in microservices architectures.\"), \"\\n\", React.createElement(_components.h1, null, \"Simplifying Data Aggregation with the BFF (Backend For the Frontend) Pattern\"), \"\\n\", React.createElement(_components.p, null, \"The BFF (Backend For the Frontend) pattern offers an effective solution to address the data aggregation challenges discussed earlier. The core idea is to introduce a separate service dedicated to interacting with all other microservices. This intermediary service, known as the BFF service, efficiently aggregates data from different sources. Additionally, the BFF service can implement its own cache to further enhance data fetching performance.\"), \"\\n\", React.createElement(_components.p, null, \"Let's revisit the example mentioned earlier and see how it fits into the BFF pattern:\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://www.plantuml.com/plantuml/svg/NP0z2y8m48Rt-nL7zkBk8DN6OXS9MdG83cbpGg6saAO54V-xwHTj7EzvNvxZBcoiChPzbG0oDdLbgT8FL0r680znZ5SoNP7JWDmCCgawgcnjtbwKd6yWXQbrcril42c0LbPbgY5aqJuw7HckqUBZ4sEJaEC749zrgSciUwdAIcBmNLlcrPv3S5ynbnP1X46mw-_QueMKXlxYdhZjVqIa4t3HNE4ZsjnDOGb4EXQvZmV13eVBlG12zsht-1y0\",\n    alt: \"plantuml\"\n  })), \"\\n\", React.createElement(_components.p, null, \"In this BFF architecture, the Frontend communicates exclusively with the BFF service. The BFF service then interacts with the Product Catalog Service and the Inventory Service to retrieve the necessary data. It aggregates this data and provides a unified interface to the Frontend, shielding it from the complexities of multiple backend services.\"), \"\\n\", React.createElement(_components.p, null, \"The BFF service can also implement caching mechanisms to optimize data retrieval. By reducing the number of redundant requests to backend services, it significantly improves frontend performance and overall system efficiency.\"), \"\\n\", React.createElement(_components.p, null, \"Adopting the BFF pattern ensures better decoupling between frontend and backend services, facilitating easier maintenance and updates. It offers a robust and scalable approach to handling data aggregation in microservices architectures, providing a seamless user experience.\"), \"\\n\", React.createElement(_components.h3, null, \"Advantages of the BFF Pattern\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Performance Improvement\", \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Hosting Proximity: By situating the BFF service close to the API services, data retrieval becomes faster compared to fetching it from web browsers. This reduced latency translates to quicker response times, enhancing the overall frontend performance.\"), \"\\n\", React.createElement(_components.li, null, \"Asynchronous Communication and Caching: The BFF service can communicate asynchronously with other API services using messages. It maintains its own cache of data and synchronizes it whenever changes occur in the data owned by other API services. This caching mechanism ensures that the BFF can swiftly respond to frontend requests with pre-fetched data, minimizing the need for repeated data retrieval.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"Decoupling API Services and Frontend Client\", \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Simplified Maintenance: With the BFF pattern in place, any migrations or refactoring in the API services don't necessitate updates to the frontend code. The BFF service acts as an intermediary, shielding the frontend from backend intricacies. This separation allows for independent development and maintenance of both frontend and backend components.\"), \"\\n\", React.createElement(_components.li, null, \"Compatibility Assurance: Changes in the API services could potentially cause compatibility issues with the frontend code if they are directly linked. However, since the frontend only interacts with the BFF service, any changes in the API services solely require updates and redeployment of the BFF service. This isolation ensures smoother upgrades and avoids disrupting the frontend functionality.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"Tailored Data Aggregation: The BFF service can customize data aggregation specifically to suit the frontend's requirements. The BFF consolidates and transforms data, providing a unified and well-structured response. This tailored approach reduces unnecessary data fetches and simplifies data handling for the frontend.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/sing/development/singmak.github.io/posts/2023-7-24-handling-related-data-microservice.mdx\";\nimport React, {useEffect} from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport PageWrapper from '../../components/PageWrapper';\nimport {Box, Container, Typography} from '@mui/material';\nimport {Code} from '../../components/Code';\nimport {logPage} from '../../analytics';\nconst BlogPost = _ref => {\n  var _data$mdx$frontmatter, _data$mdx, _data$mdx$frontmatter2, _data$mdx2, _data$mdx2$frontmatte, _data$mdx3, _data$mdx3$frontmatte;\n  let {data, children} = _ref;\n  const pageTitle = (_data$mdx$frontmatter = (_data$mdx = data.mdx) === null || _data$mdx === void 0 ? void 0 : (_data$mdx$frontmatter2 = _data$mdx.frontmatter) === null || _data$mdx$frontmatter2 === void 0 ? void 0 : _data$mdx$frontmatter2.title) !== null && _data$mdx$frontmatter !== void 0 ? _data$mdx$frontmatter : 'Blog Post';\n  useEffect(() => logPage('BlogPost', pageTitle), []);\n  return React.createElement(PageWrapper, {\n    pageTitle: pageTitle\n  }, React.createElement(Container, {\n    maxWidth: \"md\",\n    sx: {\n      padding: 5\n    }\n  }, React.createElement(Typography, {\n    component: \"h1\",\n    sx: {\n      fontSize: {\n        xs: '2rem',\n        md: '2.5rem'\n      }\n    }\n  }, (_data$mdx2 = data.mdx) === null || _data$mdx2 === void 0 ? void 0 : (_data$mdx2$frontmatte = _data$mdx2.frontmatter) === null || _data$mdx2$frontmatte === void 0 ? void 0 : _data$mdx2$frontmatte.title), React.createElement(Typography, {\n    component: \"p\"\n  }, (_data$mdx3 = data.mdx) === null || _data$mdx3 === void 0 ? void 0 : (_data$mdx3$frontmatte = _data$mdx3.frontmatter) === null || _data$mdx3$frontmatte === void 0 ? void 0 : _data$mdx3$frontmatte.date), React.createElement(Box, {\n    sx: {\n      'img': {\n        padding: 1,\n        background: '#fff'\n      }\n    }\n  }, React.createElement(MDXProvider, {\n    components: {\n      code: Code\n    }\n  }, children))));\n};\nconst query = \"490989764\";\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","h4","img","h3","h1","ol","li","_provideComponents","components","React","src","alt","wrapper","MDXLayout","BlogPost","_ref","_data$mdx$frontmatter","_data$mdx","_data$mdx$frontmatter2","_data$mdx2","_data$mdx2$frontmatte","_data$mdx3","_data$mdx3$frontmatte","data","children","pageTitle","mdx","frontmatter","title","useEffect","logPage","PageWrapper","Container","maxWidth","sx","padding","Typography","component","fontSize","xs","md","date","Box","background","MDXProvider","code","Code","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}