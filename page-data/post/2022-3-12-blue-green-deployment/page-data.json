{"componentChunkName":"component---src-pages-post-mdx-slug-tsx","path":"/post/2022-3-12-blue-green-deployment/","result":{"data":{"mdx":{"frontmatter":{"title":"The road to Zero Downtime: Blue-Green Deployment and Microservices","date":"March 12, 2022","description":"With Blue-Green Deployment, we can deploy changes or rollback changes of services in production without causing downtime."},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"The road to Zero Downtime: Blue-Green Deployment and Microservices\",\n  \"date\": \"2022-03-12\",\n  \"description\": \"With Blue-Green Deployment, we can deploy changes or rollback changes of services in production without causing downtime.\",\n  \"tags\": [\"devops\", \"deployment\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this post, I am going to share what I have learned so far about Blue-Green deployment and discuss the different approaches and possible challenges of doing Blue-Green Deployment. There could be things that I am not aware of since I haven't put them into practice yet. So I may write another post to share my experience when I have the opportunity to apply this interesting technique at work :).\"), mdx(\"h1\", null, \"What is Blue-Green Deployment?\"), mdx(\"p\", null, \"Blue-Green Deployment is one of the techniques to help us to deploy changes of applications to production without causing downtime in the services. The idea is that during the deployment of the new version of the service, we won't shut down the base service, and so there are periods that there are 2 versions of the services are running concurrently. The base version of the service will continue to receive the traffic during the deploying of the new version of the service, and once the deployment is done and tested ok, we can route all the traffic to the new version of the service and cut off the traffic from the original version of the service.\"), mdx(\"p\", null, \"There can be different approaches in Blue-Green Deployment in a system with microservices architecture.\"), mdx(\"h1\", null, \"Different approaches\"), mdx(\"h2\", null, \"Approach 1: Maintain 2 Production environments and always release new versions of all the services at the same time\"), mdx(\"p\", null, \"In this approach, we need to set up and maintain 2 production environments. One of them is active (Blue) and receives all of the traffic while the other one (Green) is used for deployment of the new versions of the services. We can take time to do the deployment and run testing on the inactive environment. Once we decide that the Green environment is ready, we change the route so that all the traffic goes to the Green environment instead. We can monitor the changes for several days and observe if the changes are causing any problems during real usage by the users. If there are critical issues in the new changes, we can easily switch back to the previous version by changing the route back to the Blue environment. This gives us buffer time to fix the problems without causing more downtime.\"), mdx(\"h3\", null, \"Advantages\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Less effort on maintaining compatibilities between the services since the old version of the services and the new version of the services don't interact with each other.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No new technology is introduced to the stack, we can just set up and deploy the 2 production environments in the same way.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Since we do the release of all the services together, the overhead of doing releases such as documentation, testing, monitoring, etc can be reduced.\")), mdx(\"h3\", null, \"Disadvantages\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extra cost of keeping 2 live productions environments. We can decide to stop the instances in the inactive production environment when we are not doing any deployments.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extra work to set up and maintain 2 production environments.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The services must be released at the same time and rolled back at the same time.\")), mdx(\"h2\", null, \"Approach 2: Maintain only one production system and release each service independently\"), mdx(\"p\", null, \"With this approach, the unit of the deployment is one service (or a stack of multiple services) instead of the whole system. The route switchover would need to be done at the service level instead of the whole system level. During deployment of the service, new instances are provisioned for the new version of the service. When the new version services are fully ready, we can do the switchover of the production traffic to the new instances. We can decide to keep the original instances (old version) of the services for some time for the ease of rolling back the changes. When we are sure that the new version of the service is working probably, the old instances can be safely terminated.\"), mdx(\"h3\", null, \"Advantages\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Services can be released/rolled back independently and concurrently by different teams\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Less cost on hosting the services.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Only need to provision new instances for the services that are being released\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Old instances can be discarded when the deployment is done.\")))), mdx(\"h3\", null, \"Disadvantages\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More time and effort on doing releases, testing, and rolling back changes. Instead of doing these tasks altogether in a single release, we need to do those tasks for each service since each service has its own release lifecycle.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More effort on maintaining backward compatibility, we need to make sure that the new changes in the service won't break the other services.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rolling back changes is more difficult. If we roll back the changes of one service, we may also break some other services that depend on the new APIs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More effort on setting up Blue-Green Deployment on every service\")), mdx(\"h2\", null, \"Which approach should we use?\"), mdx(\"p\", null, \"Approach 1 is the easier approach, requires less effort on doing the release, and allows us to roll back changes instantaneously. The main disadvantages are the extra effort and cost to maintain 2 production environments. This can be a good approach for systems that are always released by one team only at any given time.\"), mdx(\"p\", null, \"Approach 2 can be a good approach for a large system where there is a need to handle the releases of the services independently and concurrently by multiple teams so it's not possible to do the switchover from one production environment to a completely different production environment for the whole system. The disadvantages are more effort on maintaining the backward compatibilities of the services and the overhead of doing releases of individual services.\"), mdx(\"h1\", null, \"Challenges\"), mdx(\"h3\", null, \"Synchronization of data between the 2 production environments\"), mdx(\"p\", null, \"If each production environment has its database, we need to have a mechanism to synchronize the data in the 2 databases, which can be very complex to implement. Sharing the database between the Blue and Green environments could be the easier approach but we need to make sure that the database schema is compatible with both Blue and Green environments.\"), mdx(\"h3\", null, \"Handling the transactions that happen during the switchover\"), mdx(\"p\", null, \"When we change the route from a Green environment to a Blue environment, the users may be in the middle of doing something. Users may lose their sessions in the previous services instances, the system may not be able to handle the requests probably. Backend services should return errors probably in these situations and the frontend applications should handle the errors gracefully such as showing a message to the user and force reload of the application. If the user is in the middle of working on something, the user may lose his/her work because of the systems changes, we can resolve this by saving the users' changes on the client or database from time to time automatically. Also, we can implement backward compatibility in the API so that even if the users are doing work on the old version of the applications, they can still complete their work without problems.\"), mdx(\"h3\", null, \"Web application\"), mdx(\"p\", null, \"The browser may cache the old version of the web application for too long. We can implement a mechanism so that the user's browser always loads the latest version of the web application.\"), mdx(\"h3\", null, \"Mobile application\"), mdx(\"p\", null, \"A new version of a mobile application can take days to roll out to the users. Therefore, whenever we deploy a new version of a backend service, we need to make sure that APIs are still compatible with different versions of the mobile applications. On the other hand, we should also be careful about rolling back backend changes since it can break the newer version of the mobile app. In the worst-case scenario where we have to introduce changes of the backend that are not compatible with some versions of the mobile applications, we can block the usages of the app and show a dialog in the application to force the users to upgrade their app.\"), mdx(\"h3\", null, \"Data migration\"), mdx(\"p\", null, \"It may not be a trivial task to do data migration without putting the system on maintenance mode since the users (or other systems) can still trigger to create new data or make changes to the data during data migration.\\nI discussed possible solutions in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/2022-3-5-database-migration-with-no-downtime.mdx\"\n  }, \"my previous post\"), \"\\nIf it's too complex to do data migration when the system is still live, we can put part of the system in read-only mode during data migration.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"29388a84-49e6-56bf-b4a5-7a8aa5c167b5","slug":"2022-3-12-blue-green-deployment","__params":{"slug":"2022-3-12-blue-green-deployment"}}},"staticQueryHashes":["3159585216"]}